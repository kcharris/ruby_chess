problem: create a ruby chess game for the command line using OOP and testing.
The game will be two player, follow all the rules of chess, and allow the players to save the game state.

Info:
Chess rules to note-
-pawn promotion. Pawns can be promoted into any piece once they reach the end of the board.
-en passant. If a pawn moves out two squares on its first move, and by doing so lands to the side of an opponent's pawn (effectively jumping past the other pawn's ability to capture it), that other pawn has the option of capturing the first pawn as it passes by. This special move must be done immediately after the first pawn has moved past, otherwise the option to capture it is no longer available.
-Castle. One other special chess rule is called castling. This move allows you to do two important things all in one move: get your king to safety (hopefully), and get your rook out of the corner and into the game. On a player's turn he may move his king two squares over to one side and then move the rook from that side's corner to right next to the king on the opposite side. (See the example below.) However, in order to castle, the following conditions must be met:

it must be that king's very first move
it must be that rook's very first move
there cannot be any pieces between the king and rook to move
the king may not be in check or pass through check

-draw.
Player does not have a legal move and not in check
players agree to draw
Not enough pieces on the board to force a checkmate
    Cannot checkmate with 1-2 knights or a single bishop
A position is repeated 3 times a player may declare a draw
50 moves where a piece has not been captured.

Sources
https://www.chess.com/learn-how-to-play-chess
end of Info

concepts and operationalization:

board and squares:

pieces:
pieces will be represented by unicode characters for w and b chess pieces.
https://en.wikipedia.org/wiki/Chess_symbols_in_Unicode

Pieces will be stored by location inside of a variable grid that can be accessed by x and y coordinates.
Pieces have value depending on their color to determine whether a piece can capture or not.


players:

overall game including rules:

#moves will determine available moves based on a locations piece's rules and #wcheck & #bcheck will determine if both a player gets into check and if moves are unavailable after a check.

Problems:
En_passant activation and deactivation on pawn move and after opponent turn
Check tracking, self check prevention, testing moves for check, check deactivation.
Checkmate in no moves prevent check
draw if no moves available
Pawn promotion to queen if placed at other end of board.
Need a prompt for player interaction.
